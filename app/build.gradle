apply plugin: 'com.android.application'
apply plugin: 'jacoco'


def coverageSourceDirs = [
        '../app/src/main/java'
]

jacoco{
    toolVersion = "0.7.9"
   // applyTo task
    //toolVersion = "0.7.8+" // try a newer version if you can
    //reportsDir = file("$buildDir/customJacocoReportDir")
}

android {
    jacoco{
        version "0.7.9"
    }
    sourceSets {
        main {
            resources.includes = [ '**/jacoco-agent.properties' ]
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.writer.aspiring.unittestingdemo"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
       // testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }
    buildTypes {
        release {
            testCoverageEnabled true
        }
        debug {
            testCoverageEnabled true
        }
    }
}
task jacocoTestReport(type: JacocoReport ) /*dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport'])*/{
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            //dir: '$buildDir//intermediates/classes/debug',
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
   // additionalSourceDirs = files(coverageSourceDirs)
    /*executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected*//*coverage.ec"
    ])*/
    //executionData = files("$buildDir/manual-reports/coverage.exec")
    executionData = files("$buildDir/outputs/coverage.exec")

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
dependencies {
    //testAgent("org.jacoco:org.jacoco.agent:0.7.9:runtime")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.1.1'
    //noinspection GradleCompatible
    compile 'com.android.support:design:25.1.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2') {
        // Necessary if your app targets Marshmallow (since Espresso
        // hasn't moved to Marshmallow yet)
        exclude module: 'support-annotations'
        // group: 'com.android.support',

    }
    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude module: 'support-annotations'
        // Necessary if your app targets Marshmallow (since the test runner
        // hasn't moved to Marshmallow yet)
        //exclude group: 'com.android.support', module: 'support-annotations'
    }
    /*androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'*/
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
    compile 'org.mockito:mockito-core:1.10.19'
    compile 'junit:junit:4.12'

}
